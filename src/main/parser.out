Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    DOLLAR_SIGN

Grammar

Rule 0     S' -> treePattern
Rule 1     treePattern -> dirItem expression
Rule 2     treePattern -> dirItem
Rule 3     expression -> LPAREN expression binop expression RPAREN
Rule 4     expression -> relation
Rule 5     relation -> SLASH treePattern
Rule 6     relation -> DOUBLE_SLASH treePattern
Rule 7     relation -> TILDE treePattern
Rule 8     dirItem -> REGEX EQUALS VAR
Rule 9     dirItem -> REGEX
Rule 10    binop -> AND
Rule 11    binop -> OR

Terminals, with rules where they appear

AND                  : 10
DOLLAR_SIGN          : 
DOUBLE_SLASH         : 6
EQUALS               : 8
LPAREN               : 3
OR                   : 11
REGEX                : 8 9
RPAREN               : 3
SLASH                : 5
TILDE                : 7
VAR                  : 8
error                : 

Nonterminals, with rules where they appear

binop                : 3
dirItem              : 1 2
expression           : 1 3 3
relation             : 4
treePattern          : 5 6 7 0

Parsing method: LALR

state 0

    (0) S' -> . treePattern
    (1) treePattern -> . dirItem expression
    (2) treePattern -> . dirItem
    (8) dirItem -> . REGEX EQUALS VAR
    (9) dirItem -> . REGEX

    REGEX           shift and go to state 2

    treePattern                    shift and go to state 1
    dirItem                        shift and go to state 3

state 1

    (0) S' -> treePattern .



state 2

    (8) dirItem -> REGEX . EQUALS VAR
    (9) dirItem -> REGEX .

    EQUALS          shift and go to state 4
    LPAREN          reduce using rule 9 (dirItem -> REGEX .)
    SLASH           reduce using rule 9 (dirItem -> REGEX .)
    DOUBLE_SLASH    reduce using rule 9 (dirItem -> REGEX .)
    TILDE           reduce using rule 9 (dirItem -> REGEX .)
    $end            reduce using rule 9 (dirItem -> REGEX .)
    AND             reduce using rule 9 (dirItem -> REGEX .)
    OR              reduce using rule 9 (dirItem -> REGEX .)
    RPAREN          reduce using rule 9 (dirItem -> REGEX .)


state 3

    (1) treePattern -> dirItem . expression
    (2) treePattern -> dirItem .
    (3) expression -> . LPAREN expression binop expression RPAREN
    (4) expression -> . relation
    (5) relation -> . SLASH treePattern
    (6) relation -> . DOUBLE_SLASH treePattern
    (7) relation -> . TILDE treePattern

    $end            reduce using rule 2 (treePattern -> dirItem .)
    AND             reduce using rule 2 (treePattern -> dirItem .)
    OR              reduce using rule 2 (treePattern -> dirItem .)
    RPAREN          reduce using rule 2 (treePattern -> dirItem .)
    LPAREN          shift and go to state 6
    SLASH           shift and go to state 8
    DOUBLE_SLASH    shift and go to state 9
    TILDE           shift and go to state 5

    relation                       shift and go to state 7
    expression                     shift and go to state 10

state 4

    (8) dirItem -> REGEX EQUALS . VAR

    VAR             shift and go to state 11


state 5

    (7) relation -> TILDE . treePattern
    (1) treePattern -> . dirItem expression
    (2) treePattern -> . dirItem
    (8) dirItem -> . REGEX EQUALS VAR
    (9) dirItem -> . REGEX

    REGEX           shift and go to state 2

    treePattern                    shift and go to state 12
    dirItem                        shift and go to state 3

state 6

    (3) expression -> LPAREN . expression binop expression RPAREN
    (3) expression -> . LPAREN expression binop expression RPAREN
    (4) expression -> . relation
    (5) relation -> . SLASH treePattern
    (6) relation -> . DOUBLE_SLASH treePattern
    (7) relation -> . TILDE treePattern

    LPAREN          shift and go to state 6
    SLASH           shift and go to state 8
    DOUBLE_SLASH    shift and go to state 9
    TILDE           shift and go to state 5

    relation                       shift and go to state 7
    expression                     shift and go to state 13

state 7

    (4) expression -> relation .

    RPAREN          reduce using rule 4 (expression -> relation .)
    $end            reduce using rule 4 (expression -> relation .)
    AND             reduce using rule 4 (expression -> relation .)
    OR              reduce using rule 4 (expression -> relation .)


state 8

    (5) relation -> SLASH . treePattern
    (1) treePattern -> . dirItem expression
    (2) treePattern -> . dirItem
    (8) dirItem -> . REGEX EQUALS VAR
    (9) dirItem -> . REGEX

    REGEX           shift and go to state 2

    treePattern                    shift and go to state 14
    dirItem                        shift and go to state 3

state 9

    (6) relation -> DOUBLE_SLASH . treePattern
    (1) treePattern -> . dirItem expression
    (2) treePattern -> . dirItem
    (8) dirItem -> . REGEX EQUALS VAR
    (9) dirItem -> . REGEX

    REGEX           shift and go to state 2

    treePattern                    shift and go to state 15
    dirItem                        shift and go to state 3

state 10

    (1) treePattern -> dirItem expression .

    $end            reduce using rule 1 (treePattern -> dirItem expression .)
    AND             reduce using rule 1 (treePattern -> dirItem expression .)
    OR              reduce using rule 1 (treePattern -> dirItem expression .)
    RPAREN          reduce using rule 1 (treePattern -> dirItem expression .)


state 11

    (8) dirItem -> REGEX EQUALS VAR .

    LPAREN          reduce using rule 8 (dirItem -> REGEX EQUALS VAR .)
    SLASH           reduce using rule 8 (dirItem -> REGEX EQUALS VAR .)
    DOUBLE_SLASH    reduce using rule 8 (dirItem -> REGEX EQUALS VAR .)
    TILDE           reduce using rule 8 (dirItem -> REGEX EQUALS VAR .)
    $end            reduce using rule 8 (dirItem -> REGEX EQUALS VAR .)
    AND             reduce using rule 8 (dirItem -> REGEX EQUALS VAR .)
    OR              reduce using rule 8 (dirItem -> REGEX EQUALS VAR .)
    RPAREN          reduce using rule 8 (dirItem -> REGEX EQUALS VAR .)


state 12

    (7) relation -> TILDE treePattern .

    $end            reduce using rule 7 (relation -> TILDE treePattern .)
    AND             reduce using rule 7 (relation -> TILDE treePattern .)
    OR              reduce using rule 7 (relation -> TILDE treePattern .)
    RPAREN          reduce using rule 7 (relation -> TILDE treePattern .)


state 13

    (3) expression -> LPAREN expression . binop expression RPAREN
    (10) binop -> . AND
    (11) binop -> . OR

    AND             shift and go to state 18
    OR              shift and go to state 17

    binop                          shift and go to state 16

state 14

    (5) relation -> SLASH treePattern .

    $end            reduce using rule 5 (relation -> SLASH treePattern .)
    AND             reduce using rule 5 (relation -> SLASH treePattern .)
    OR              reduce using rule 5 (relation -> SLASH treePattern .)
    RPAREN          reduce using rule 5 (relation -> SLASH treePattern .)


state 15

    (6) relation -> DOUBLE_SLASH treePattern .

    $end            reduce using rule 6 (relation -> DOUBLE_SLASH treePattern .)
    AND             reduce using rule 6 (relation -> DOUBLE_SLASH treePattern .)
    OR              reduce using rule 6 (relation -> DOUBLE_SLASH treePattern .)
    RPAREN          reduce using rule 6 (relation -> DOUBLE_SLASH treePattern .)


state 16

    (3) expression -> LPAREN expression binop . expression RPAREN
    (3) expression -> . LPAREN expression binop expression RPAREN
    (4) expression -> . relation
    (5) relation -> . SLASH treePattern
    (6) relation -> . DOUBLE_SLASH treePattern
    (7) relation -> . TILDE treePattern

    LPAREN          shift and go to state 6
    SLASH           shift and go to state 8
    DOUBLE_SLASH    shift and go to state 9
    TILDE           shift and go to state 5

    relation                       shift and go to state 7
    expression                     shift and go to state 19

state 17

    (11) binop -> OR .

    LPAREN          reduce using rule 11 (binop -> OR .)
    SLASH           reduce using rule 11 (binop -> OR .)
    DOUBLE_SLASH    reduce using rule 11 (binop -> OR .)
    TILDE           reduce using rule 11 (binop -> OR .)


state 18

    (10) binop -> AND .

    LPAREN          reduce using rule 10 (binop -> AND .)
    SLASH           reduce using rule 10 (binop -> AND .)
    DOUBLE_SLASH    reduce using rule 10 (binop -> AND .)
    TILDE           reduce using rule 10 (binop -> AND .)


state 19

    (3) expression -> LPAREN expression binop expression . RPAREN

    RPAREN          shift and go to state 20


state 20

    (3) expression -> LPAREN expression binop expression RPAREN .

    RPAREN          reduce using rule 3 (expression -> LPAREN expression binop expression RPAREN .)
    $end            reduce using rule 3 (expression -> LPAREN expression binop expression RPAREN .)
    AND             reduce using rule 3 (expression -> LPAREN expression binop expression RPAREN .)
    OR              reduce using rule 3 (expression -> LPAREN expression binop expression RPAREN .)

